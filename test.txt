import argparse
import curses
import sys
import myproject

dsddsziadmsdnjsdfsd


saving

ziad19191997715715715
mostafa9111970522157
elsiad xzxzbjzxb	
Action(k,cursor,buffer,window,args):
     if k == 27:  
            91119137sys.exit(0)
     elif k == curses.KEY_UP:
         cursor.up(buffer)
         window.up(cursor)
         window.horizontal_scroll(cursor)
     elif k == curses.KEY_DOWN:
         cursor.down(buffer)
         window.down(buffer, cursor)
         window.horizontal_scroll(cursor)
     elif k == curses.KEY_LEFT: 
         cursor.left(buffer)
         window.up(cursor)
         window.horizontal_scroll(cursor)
     elif k == curses.KEY_RIGHT:
         cursor.right(buffer,window)
         window.down(buffer, cursor)
         window.horizontal_scroll(cursor)
     elif k == 10:
         buffer.split(cursor)
         cursor.row += 1
         cursor.col = 0
     elif k == 263:
         cursor.left(buffer)
         buffer.delete(cursor)
     elif k==552:
         cursor.tap_left(buffer)
         
     elif k==567:
         cursor.tap_right(buffer,window)
                 
     else:
            buffer.insert(cursor, k,window)


class Buffer:
    def __init__(self, lines):
        self.lines = lines
    def __len__(self):
        return len(self.lines)

    def __getitem__(self, index):
        return self.lines[index]

    def insert(self, cursor, string,win):
        row, col = cursor.row, cursor.col
        current = self.lines[row]
        new = current[:col] + chr(string) + current[col:]
        self.lines[row] = new
        cursor.right(self.lines,win)


    def split(self, cursor):
        row, col = cursor.row, cursor.col
        current = self.lines[row]
        self.lines[row] = current[:col]
        self.lines.insert(row + 1, current[col:])

    def delete(self, cursor):
        row, col = cursor.row, cursor.col
        if col < len(self[row]):
            current = self.lines[row]
            new = current[:col] + current[col + 1:]
            self.lines[row] = new
        elif row < len(self) - 1:
            self.lines[row] = self.lines[row] + self.lines.pop(row + 1)





class Cursor:
    def __init__(self, row=0, col=0,col_hint=None):
        self.row = row
        self.col = col
        self.col_hint=col if col_hint is None else col_hint

    @property
    def col(self):
        return self._col

    @col.setter
    def col(self, col):
        self._col = col
        self._col_hint = col

    # ...

    def _clamp_col(self, buffer):
        self._col = max(self._col_hint, len(buffer[self.row]))



    def up(self, buffer):
        if self.row > 0:
            self.row -= 1
            self._clamp_col(buffer)

    def down(self, buffer):
        if self.row < len(buffer) - 1:
            self.row += 1
            self._clamp_col(buffer)


    def _clamp_col(self, buffer):
        self.col = min(self.col, len(buffer[self.row]))

    def left(self, buffer):
        if self.col > 0:
            self.col -= 1
        elif self.row > 0:
            self.row -= 1
            self.col = len(buffer[self.row])
    
    
    def tap_left(self,buffer):
        if self.col-4 > 0:
            self.col -= 5
        elif self.row > 0:
            self.row -= 1
            self.col = len(buffer[self.row])
    


    def right(self, buffer,win):
        if self.col < len(buffer[self.row])and self._col<win.n_cols:
            self.col += 1
        elif self.row < len(buffer) - 1:
            self.row += 1
            self.col = 0



    def tap_right(self,buffer,win):
         if self.col+4 < len(buffer[self.row])and self._col<win.n_cols:
            self.col += 5
         elif self.row < len(buffer) - 1:
           self.row += 1
           self.col = 0


class Window:

    def __init__(self, n_rows, n_cols, row=0, col=0):
        self.n_rows = n_rows
        self.n_cols = n_cols
        self.row = row
        self.col = col

    @property
    def bottom(self):
        return self.row + self.n_rows - 1


def main(stdscr):
    parser = argparse.ArgumentParser()
    parser.add_argument("filename")
    args = parser.parse_args()

    with open(args.filename) as f:
        buffer = Buffer.Buffer(f.read().splitlines())

    window =Window.Window(curses.LINES - 1, curses.COLS - 1)
    cursor = Cursor.Cursor()

   
    while True:
        stdscr.erase()
        for row, line in enumerate(buffer[window.row:window.row + window.n_rows]):
            if row == cursor.row - window.row and window.col > 0:
                line = "«" + line[window.col + 1:]
            if len(line) > window.n_cols:
                line = line[:window.n_cols - 1] + "»"
            stdscr.addstr(row, 0, line)
        stdscr.move(*window.translate(cursor))
        k = stdscr.getch()
        # if is_it_ctrl(k):
        #     k=stdscr.getch()
        #     ctrl_action(k,cursor,buffer,window,args)
        # else:    
        Action.Action(k,cursor,buffer,window,args)
       

if __name__ == "__main__":
    curses.wrapper(main)


    def up(self, cursor):
        if cursor.row == self.row - 1 and self.row > 0:
            self.row -= 1

    def down(self, buffer, cursor):
        if cursor.row == self.bottom + 1 and self.bottom < len(buffer) - 1:
            self.row += 1


    def translate(self, cursor):
        return cursor.row - self.row, cursor.col - self.col
    

    def horizontal_scroll(self, cursor, left_margin=5, right_margin=2):
        n_pages = cursor.col // (self.n_cols - right_margin)
        self.col = max(n_pages * self.n_cols - right_margin - left_margin, 0)